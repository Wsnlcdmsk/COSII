import matplotlib.pyplot as plt
import numpy as np
import math
from my_math import my_cos, my_sin, integral, power_fast, DFT, FFT, IDFT, IFFT, my_log2, my_sqrt
import time
from wav import save_wave


a1, b1, v1 = 1, 3, 1
a2, b2, v2 = 2, 5, 4
phi0 = -1.9
N = 256
D = 23

epsilon = 1e-15

attenuation_factor = 0.5
cutoff_frequency = 1


def U1(a1, b1, v1, t, phi0):
    return a1 * power_fast(my_sin(v1 * t + phi0), b1)


def U2(a2, b2, v2, t, phi0):
    return a2 * power_fast(my_cos(v2 * t + phi0), b2)


def product_U1_U2(t, a1, b1, v1, a2, b2, v2, phi0):
    return U1(a1, b1, v1, t, phi0) * U2(a2, b2, v2, t, phi0)


def f(t, a1, b1, v1, a2, b2, v2, phi0):
    return U1(a1, b1, v1, t, phi0) + U2(a2, b2, v2, t, phi0)


def modify_spectrum(Y, attenuation_factor, cutoff_frequency, sample_rate):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∞–º–ø–ª–∏—Ç—É–¥—É –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –æ–±–Ω—É–ª—è–µ—Ç –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã."""
    N = len(Y)
    freq_step = sample_rate / N
    modified_Y = np.array(Y, dtype=complex)

    for i in range(N):
        freq = i * freq_step

        if freq < cutoff_frequency:
            modified_Y[i] = 0
        else:
            modified_Y[i] *= attenuation_factor

    return modified_Y


def calculate_fft_efficiency(N):
    """–†–∞—Å—á—ë—Ç  —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    operations_fft = N * my_log2(N)
    operations_dft = N ** 2
    speedup = operations_dft / operations_fft

    x = np.random.random(N)
    start_time = time.time()
    DFT(x)
    dft_time = time.time() - start_time

    start_time = time.time()
    FFT(x)
    fft_time = time.time() - start_time

    print(f"üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {N}")
    print(f"üìå –û–ø–µ—Ä–∞—Ü–∏–∏ –î–ü–§: {operations_dft:.0f}")
    print(f"üìå –û–ø–µ—Ä–∞—Ü–∏–∏ –ë–ü–§: {operations_fft:.0f}")
    print(f"‚ö° –ë–ü–§ –±—ã—Å—Ç—Ä–µ–µ –î–ü–§ –≤ {speedup:.2f} —Ä–∞–∑!")
    print(f"‚è± –í—Ä–µ–º—è –î–ü–§: {dft_time:.6f} —Å–µ–∫")
    print(f"‚è± –í—Ä–µ–º—è –ë–ü–§: {fft_time:.6f} —Å–µ–∫")
    print(f"‚è≥ –ë–ü–§ –±—ã—Å—Ç—Ä–µ–µ –î–ü–§ –Ω–∞ {dft_time - fft_time:.6f} —Å–µ–∫")


result = integral(product_U1_U2, phi0, phi0 + 2 * math.pi, N, a1, b1, v1, a2, b2, v2, phi0)
print("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:", result)

if abs(result) < epsilon:
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–∏–∑–æ–∫ –∫ 0 —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {epsilon}, " +
          "—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—Ç–Ω–æ —Ñ—É–Ω—Ü–∫–∏–∏ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã")
else:
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–∞–≤–µ–Ω 0 —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {epsilon} " +
          "—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—Ç–Ω–æ —Ñ—É–Ω—Ü–∫–∏–∏ –Ω–µ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã")

t = np.linspace(0, D, N)
y = f(t, a1, b1, v1, a2, b2, v2, phi0)

start_time = time.time()
y_dft = DFT(y)
dft_time = time.time() - start_time

start_time = time.time()
y_fft = FFT(y)
fft_time = time.time() - start_time

start_time = time.time()
y_reconstructed_dft = IDFT(y_dft).real
idft_time = time.time() - start_time

start_time = time.time()
y_reconstructed_fft = IFFT(y_fft).real
ifft_time = time.time() - start_time

calculate_fft_efficiency(N)


def calculate_frequencies(N, D):
    sample_rate = N / D
    freq = [(i * sample_rate) / N for i in range(N // 2)]
    return freq


freq = calculate_frequencies(N, D)


def calculate_amplitude(Y):
    amplitude = [my_sqrt(y.real**2 + y.imag**2) for y in Y]
    return amplitude


amplitude_dft = calculate_amplitude(y_dft)
amplitude_fft = calculate_amplitude(y_fft)

y_fft_modified = modify_spectrum(y_fft, attenuation_factor, cutoff_frequency, N / D)
amplitude_fft_modified = calculate_amplitude(y_fft_modified)

print(f"üìå–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–ü–§: {dft_time:.5f} —Å–µ–∫")
print(f"üìå–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ë–ü–§: {fft_time:.5f} —Å–µ–∫")
print(f"‚è≥–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ë–ü–§ –Ω–∞ {dft_time - fft_time:.5f} —Å–µ–∫, –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –î–ü–§")
print(f"üìå–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –û–î–ü–§: {idft_time:.5f} —Å–µ–∫")
print(f"üìå–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –û–ë–ü–§: {ifft_time:.5f} —Å–µ–∫")
print(f"‚è≥–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –û–ë–ü–§ –Ω–∞ {idft_time - ifft_time:.5f} —Å–µ–∫, –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –û–î–ü–§")

plt.figure(figsize=(12, 10))

plt.subplot(3, 2, 1)
plt.plot(t, y, label="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π f(t)")
plt.title("–ì—Ä–∞—Ñ–∏–∫ f(t)")
plt.legend()
plt.grid()

plt.subplot(3, 2, 2)
plt.plot(freq[:N//2], amplitude_fft_modified[:N//2], label="–ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –ê–ß–•", color='purple')
plt.title("–ê–º–ø–ª–∏—Ç—É–¥–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
plt.legend()
plt.grid()

plt.subplot(3, 2, 3)
plt.plot(freq[:N//2], amplitude_fft[:N//2], label="–ê–ß–• (–î–ü–§)", color='b')
plt.title("–ê–º–ø–ª–∏—Ç—É–¥–Ω—ã–π —Å–ø–µ–∫—Ç—Ä (–î–ü–§)")
plt.legend()
plt.grid()

plt.subplot(3, 2, 4)
plt.plot(freq[:N//2], amplitude_fft[:N//2], label="–ê–ß–• (–ë–ü–§)", color='r')
plt.title("–ê–º–ø–ª–∏—Ç—É–¥–Ω—ã–π —Å–ø–µ–∫—Ç—Ä (–ë–ü–§)")
plt.legend()
plt.grid()

plt.subplot(3, 2, 5)
plt.plot(t, y_reconstructed_dft, label="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–û–î–ü–§)", color='g')
plt.title("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–û–î–ü–§)")
plt.legend()
plt.grid()

plt.subplot(3, 2, 6)
plt.plot(t, y_reconstructed_fft, label="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–û–ë–ü–§)", color='m')
plt.title("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–û–ë–ü–§)")
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()

save_wave("üéßy_reconstructed_dft.wav", y_reconstructed_dft.real, round(N/D))
print("üéµ–ê—É–¥–∏–æ—Ñ–∞–π–ª 'y_reconstructed_dft.wav' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

save_wave("üéßy_reconstructed_fft.wav", y_reconstructed_fft.real, round(N/D))
print("üéµ–ê—É–¥–∏–æ—Ñ–∞–π–ª 'y_reconstructed_fft.wav' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
